name: Install Libuv
description: Install Libuv

inputs:
  version:
    required: false
    default: "1.48.0"
    description: "Libuv version"
  sanitizer:
    required: false
    description: "ASAN or MSAN"
    default: ''

outputs:
  install-dir:
    value: ${{ steps.values.outputs.install_dir }}
    description: "Libuv Install Dir"
  pkg-cofnig-path:
    value: ${{ steps.values.outputs.pkg_config_path }}
    description: "Libuv PkgConfig script path"

runs:
  using: composite
  steps:
    - name: Cache Libuv
      id: cache-libuv
      uses: actions/cache@v4
      with:
        path: /opt/libuv
        key: libuv-${{ inputs.version }}-${{ runner.arch }}-${{ runner.os }}${{ inputs.sanitizer }}

    - name: Setup cmake
      if: steps.cache-libuv.outputs.cache-hit != 'true'
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: "3.24"

    - name: Install Deps
      if: steps.cache-libuv.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config clang build-essential ninja-build

    - name: Install Deps for Sanitizers
      if: steps.cache-libuv.outputs.cache-hit != 'true' && inputs.sanitizer != ''
      shell: bash
      run: |
        sudo apt-get install -y libasan8 libubsan1
        sudo sysctl vm.mmap_rnd_bits=28

    - name: Download Libuv
      if: steps.cache-libuv.outputs.cache-hit != 'true'
      shell: bash
      working-directory: /opt
      run: |
        curl -L "https://github.com/libuv/libuv/archive/v${{ inputs.version }}.tar.gz" | tar xzf -
        mv "libuv-${{ inputs.version }}" libuv-src
        cd libuv-src && mkdir build
    - name: 'Install Libuv'
      if: steps.cache-libuv.outputs.cache-hit != 'true'
      shell: bash
      working-directory: /opt/libuv-src/build
      run: |
        cmake -G Ninja \
          -DBUILD_TESTING=OFF \
          -DLIBUV_BUILD_SHARED=ON \
          -DASAN=${{ inputs.sanitizer == 'asan' && 'ON' || 'OFF' }} \
          -DMSAN=${{ inputs.sanitizer == 'msan' && 'ON' || 'OFF' }} \
          -DUBSAN=${{ inputs.sanitizer != '' && 'ON' || 'OFF' }} \
          -DCMAKE_INSTALL_PREFIX="/opt/libuv" \
          -DCMAKE_BUILD_TYPE="RelWithInfo" ..
      env:
        CC: clang
    - name: Compile
      if: steps.cache-libuv.outputs.cache-hit != 'true'
      shell: bash
      working-directory: /opt/libuv-src/build
      run: sudo ninja install
    - name: Add Libuv to the PATH
      id: values
      shell: bash
      run: |
        echo "pkg_config_path=/opt/libuv/lib/pkgconfig" >> "$GITHUB_PATH"
        echo "install_dir=/opt/libuv" >> "$GITHUB_PATH"
