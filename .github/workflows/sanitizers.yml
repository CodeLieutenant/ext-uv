name: Sanitizers

on:
  push:
    branches:
      - 0.3.x
  pull_request:
    branches:
      - 0.3.x

permissions:
  contents: read

jobs:
  # Adapted from https://github.com/beberlei/hdrhistogram-php
  sanitizers:
    name: ${{ matrix.php }}-${{ matrix.phpts }}-${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - "asan"
          - "msan"
        libuv:
          - "1.48.0"
        php:
          - "8.1"
          - "8.2"
          - "8.3"
          - "8.4"
        phpts:
          - "ts"
          - "nts"
    steps:
      - run: |
          sudo apt-get remove 'php*'
          sudo apt update
          sudo apt-get install -y pkg-config clang libasan8 libubsan1 build-essential valgrind ninja-build
          sudo sysctl vm.mmap_rnd_bits=28
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Determine PHP version
        id: determine-php-version
        run: |
          curl -fsSL 'https://www.php.net/releases/index.php?json&max=1&version=${{ matrix.php }}' -o version.json
          echo version="$(jq -r 'keys[0]' version.json)" >> "$GITHUB_OUTPUT"
          echo archive="$(jq -r '.[] .source[] | select(.filename |endswith(".xz")) | "https://www.php.net/distributions/" + .filename' version.json)" >> "$GITHUB_OUTPUT"
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.24"
      - name: Cache PHP
        id: cache-php
        uses: actions/cache@v4
        with:
          path: php/target
          key: php-sanitizers-${{ matrix.sanitizer }}-${{ runner.arch }}-${{ steps.determine-php-version.outputs.version }}-${{ matrix.phpts }}

      - name: Cache Libuv
        id: cache-libuv
        uses: actions/cache@v4
        with:
          path: /opt/libuv
          key: libuv-${{ matrix.libuv }}-${{ matrix.sanitizer }}-${{ runner.arch }}-${{ runner.os }}
      - name: "Install Libuv"
        if: steps.cache-libuv.outputs.cache-hit != 'true'
        working-directory: /opt
        run: |
          curl -L "https://github.com/libuv/libuv/archive/v${{ matrix.libuv }}.tar.gz" | tar xzf -
          mv "libuv-${{ matrix.libuv }}" libuv-src && cd libuv-src
          mkdir build && cd build
          cmake -G Ninja \
              -DBUILD_TESTING=OFF \
              -DLIBUV_BUILD_SHARED=ON \
              -DASAN=${{ matrix.sanitizer == 'asan' && 'ON' || 'OFF' }} \
              -DMSAN=${{ matrix.sanitizer == 'msan' && 'ON' || 'OFF' }} \
              -DUBSAN=ON \
              -DCMAKE_INSTALL_PREFIX="/opt/libuv" \
              -DCMAKE_BUILD_TYPE="RelWithInfo" ..
          sudo ninja install
        env:
          CC: clang
          CXX: clang++
      - if: steps.cache-php.outputs.cache-hit != 'true'
        name: Compile PHP
        run: |
          mkdir php/
          curl -fsSL "${{ steps.determine-php-version.outputs.archive }}" | tar -Jx -C php --strip-components=1
          cd php/
          ./configure \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS" \
            --enable-debug \
            --enable-cli \
            ${{ matrix.phpts == 'ts' && '--enable-zts' || '' }} \
            --enable-option-checking=fatal \
            --disable-zend-signals \
            --without-sqlite3 \
            --without-pdo-sqlite \
            --without-libxml \
            --disable-dom \
            --disable-simplexml \
            --disable-xml \
            --disable-xmlreader \
            --disable-xmlwriter \
            --without-pcre-jit \
            --disable-opcache-jit \
            --disable-cgi \
            --disable-phpdbg \
            --without-pear \
            --disable-mbregex \
            --enable-werror \
            ${{ matrix.sanitizer == 'msan' && '--enable-memory-sanitizer' || '' }} \
            ${{ matrix.sanitizer == 'asan' && '--enable-address-sanitizer' || '' }} \
            --prefix="$(pwd)/target/"
          make -j"$(getconf _NPROCESSORS_ONLN)"
          make install
        env:
          CFLAGS: -g -O0 -fsanitize=undefined,${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }} -DZEND_TRACK_ARENA_ALLOC
          LDFLAGS: -fsanitize=undefined,${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }}
          CC: clang
          USE_ZEND_ALLOC: 0
          LIBRARY_PATH: ${{ github.workspace }}/php/target/lib
          LD_LIBRARY_PATH: ${{ github.workspace }}/php/target/lib
      - name: Add PHP to the PATH
        run: echo "$(pwd)/php/target/bin" >> "$GITHUB_PATH"
      - name: Compile uv extension
        run: |
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/libuv/lib/pkgconfig"
          phpize
          ./configure \
            --enable-ext-testing \
            --enable-debug \
            ${{ matrix.sanitizer == 'asan' && '--enable-asan' || '' }} \
            ${{ matrix.sanitizer == 'msan' && '--enable-msan' || '' }}
          make -j$(getconf _NPROCESSORS_ONLN)
          sudo make install
      - name: Run the tests
        run: php run-tests.php -d "extension=uv" -q -j$(getconf _NPROCESSORS_ONLN) -p $(pwd)/php/target/bin/php --show-diff --set-timeout 120
        env:
          CFLAGS: -fsanitize=undefined,${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }} -DZEND_TRACK_ARENA_ALLOC
          LDFLAGS: -fsanitize=undefined,${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }}
          CC: clang
          USE_ZEND_ALLOC: 0
          LIBRARY_PATH: ${{ github.workspace }}/php/target/lib
          LD_LIBRARY_PATH: ${{ github.workspace }}/php/target/lib
